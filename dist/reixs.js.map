{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","src/handler.js","src/reixs.js"],"names":[],"mappings":"AAAA;;;ACAA,MAAM,CAAC,OAAP,GAAiB,OAAO,CAAC,aAAD,CAAP,CAAuB,OAAxC;;;;;;;;;;;;;;;;;;;;;;;;eCCI,oBAAqB;AAAA;;AAAA,oCAAN,IAAM;AAAN,IAAA,IAAM;AAAA;;AAAA,MACV,MADU,GACiD,IADjD;AAAA,MACF,WADE,GACiD,IADjD;AAAA,MACW,GADX,GACiD,IADjD;AAAA,eACiD,IADjD;AAAA,MACgB,MADhB,uBACyB,KADzB;AAAA,gBACiD,IADjD;AAAA,MACgC,MADhC,wBACyC,IADzC,YAEjB;;AACA,OAAK,MAAL,GAAc,KAAK,CAAC,GAAD,CAAnB;AACA,OAAK,YAAL,qBAAwB,MAAM,CAAC,YAA/B;AACA,OAAK,YAAL,qBAAwB,MAAM,CAAC,YAA/B;AACA,OAAK,cAAL,sBAA0B,WAAW,CAAC,QAAtC;AACA,OAAK,cAAL,sBAA0B,WAAW,CAAC,QAAtC;AACA,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,MAAL,GAAc,MAAd;AACH,C;;;;;;;;;;;;ACXL;;;;AAEA;AACA,IAAM,MAAM,GAAG;AACX,EAAA,YAAY,EAAE,EADH;AAEX,EAAA,YAAY,EAAE,EAFH,CAKf;;AALe,CAAf;AAMA,IAAM,WAAW,GAAG;AAChB,EAAA,QAAQ,EAAE,EADM;AAEhB,EAAA,QAAQ,EAAE;AAGd;;;;;;;;AALoB,CAApB;;AAYA,SAAS,cAAT,CAAwB,GAAxB,EAA6B,MAA7B,EAAqC,MAArC,EAA6C;AACzC,SAAO,IAAI,gBAAJ,CAAY,MAAZ,EAAoB,WAApB,EAAiC,GAAjC,EAAsC,MAAtC,EAA8C,MAA9C,CAAP;AACH;AAED;;;;;;;;AAMA,SAAS,QAAT,CAAkB,IAAlB,EAAoC;AAAA,oCAAT,OAAS;AAAT,IAAA,OAAS;AAAA;;AAChC,EAAA,WAAW,CAAC,IAAD,CAAX,aAAwB,OAAxB;AACH;;eACc,IAAI,KAAJ,CAAU,cAAV,EAA0B;AACrC,EAAA,GADqC,eACjC,MADiC,EACzB,QADyB,EACf;AAClB,YAAQ,QAAR;AACA;AACA,WAAK,SAAL;AACI,eAAO,aAAP;AACJ;;AACA,WAAK,UAAL;AACA,WAAK,UAAL;AACI,eAAO,QAAQ,CAAC,IAAT,CAAc,IAAd,EAAoB,QAApB,CAAP;AAPJ;AASH,GAXoC;AAYrC,EAAA,GAZqC,eAYjC,MAZiC,EAYzB,QAZyB,EAYf,KAZe,EAYR;AACzB;AACA,QAAI,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,QAApB,KACG,KAAK,CAAC,WAAN,KAAsB,MAD7B,EACqC;AACjC,MAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,KAAnB;AACH;AACJ;AAlBoC,CAA1B,C","file":"reixs.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = require('./src/reixs').default","export default class {\n    constructor(...args) {\n        const [global, globalPipes, url, method = 'get', params = null] = args\n        // Cannot be modified\n        this.entity = fetch(url)\n        this.globalHeader = {...global.globalHeader}\n        this.globalParams = {...global.globalParams}\n        this.globalReqPipes = [...globalPipes.reqPipes]\n        this.globalResPipes = [...globalPipes.resPipes]\n        this.method = method\n        this.params = params\n    }\n}\n\n","import Handler from './handler'\n\n// Multiple requests Shared\nconst global = {\n    globalHeader: {},\n    globalParams: {}\n}\n\n// Processing parameters\nconst globalPipes = {\n    reqPipes: [],\n    resPipes: []\n}\n\n/**\n * Create reixs \n * \n * @param {string} url \n * @param {string} method\n * @param {*} params  \n */\nfunction createInstance(url, method, params) {\n    return new Handler(global, globalPipes, url, method, params)\n}\n\n/**\n * Set pipe \n * \n * @param {string} name \n * @param  {...any} funList \n */\nfunction setPipes(name, ...funList) {\n    globalPipes[name] = [...funList]\n}\nexport default new Proxy(createInstance, {\n    get(target, property) {\n        switch (property) {\n        // Replaced by browserify-versionify transform\n        case 'version':\n            return '__VERSION__'\n        // Set request and response pipe\n        case 'reqPipes':\n        case 'resPipes':\n            return setPipes.bind(null, property)\n        }\n    },\n    set(target, property, value) {\n        // Must be set to Object\n        if (Reflect.has(global, property) \n            && value.constructor === Object) {\n            global[property] = value\n        }\n    }\n})\n\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpbmRleC5qcyIsInNyYy9oYW5kbGVyLmpzIiwic3JjL3JlaXhzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixPQUFPLENBQUMsYUFBRCxDQUFQLENBQXVCLE9BQXhDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUNDSSxvQkFBcUI7QUFBQTs7QUFBQSxvQ0FBTixJQUFNO0FBQU4sSUFBQSxJQUFNO0FBQUE7O0FBQUEsTUFDVixNQURVLEdBQ2lELElBRGpEO0FBQUEsTUFDRixXQURFLEdBQ2lELElBRGpEO0FBQUEsTUFDVyxHQURYLEdBQ2lELElBRGpEO0FBQUEsZUFDaUQsSUFEakQ7QUFBQSxNQUNnQixNQURoQix1QkFDeUIsS0FEekI7QUFBQSxnQkFDaUQsSUFEakQ7QUFBQSxNQUNnQyxNQURoQyx3QkFDeUMsSUFEekMsWUFFakI7O0FBQ0EsT0FBSyxNQUFMLEdBQWMsS0FBSyxDQUFDLEdBQUQsQ0FBbkI7QUFDQSxPQUFLLFlBQUwscUJBQXdCLE1BQU0sQ0FBQyxZQUEvQjtBQUNBLE9BQUssWUFBTCxxQkFBd0IsTUFBTSxDQUFDLFlBQS9CO0FBQ0EsT0FBSyxjQUFMLHNCQUEwQixXQUFXLENBQUMsUUFBdEM7QUFDQSxPQUFLLGNBQUwsc0JBQTBCLFdBQVcsQ0FBQyxRQUF0QztBQUNBLE9BQUssTUFBTCxHQUFjLE1BQWQ7QUFDQSxPQUFLLE1BQUwsR0FBYyxNQUFkO0FBQ0gsQzs7Ozs7Ozs7Ozs7O0FDWEw7Ozs7QUFFQTtBQUNBLElBQU0sTUFBTSxHQUFHO0FBQ1gsRUFBQSxZQUFZLEVBQUUsRUFESDtBQUVYLEVBQUEsWUFBWSxFQUFFLEVBRkgsQ0FLZjs7QUFMZSxDQUFmO0FBTUEsSUFBTSxXQUFXLEdBQUc7QUFDaEIsRUFBQSxRQUFRLEVBQUUsRUFETTtBQUVoQixFQUFBLFFBQVEsRUFBRTtBQUdkOzs7Ozs7OztBQUxvQixDQUFwQjs7QUFZQSxTQUFTLGNBQVQsQ0FBd0IsR0FBeEIsRUFBNkIsTUFBN0IsRUFBcUMsTUFBckMsRUFBNkM7QUFDekMsU0FBTyxJQUFJLGdCQUFKLENBQVksTUFBWixFQUFvQixXQUFwQixFQUFpQyxHQUFqQyxFQUFzQyxNQUF0QyxFQUE4QyxNQUE5QyxDQUFQO0FBQ0g7QUFFRDs7Ozs7Ozs7QUFNQSxTQUFTLFFBQVQsQ0FBa0IsSUFBbEIsRUFBb0M7QUFBQSxvQ0FBVCxPQUFTO0FBQVQsSUFBQSxPQUFTO0FBQUE7O0FBQ2hDLEVBQUEsV0FBVyxDQUFDLElBQUQsQ0FBWCxhQUF3QixPQUF4QjtBQUNIOztlQUNjLElBQUksS0FBSixDQUFVLGNBQVYsRUFBMEI7QUFDckMsRUFBQSxHQURxQyxlQUNqQyxNQURpQyxFQUN6QixRQUR5QixFQUNmO0FBQ2xCLFlBQVEsUUFBUjtBQUNBO0FBQ0EsV0FBSyxTQUFMO0FBQ0ksZUFBTyxhQUFQO0FBQ0o7O0FBQ0EsV0FBSyxVQUFMO0FBQ0EsV0FBSyxVQUFMO0FBQ0ksZUFBTyxRQUFRLENBQUMsSUFBVCxDQUFjLElBQWQsRUFBb0IsUUFBcEIsQ0FBUDtBQVBKO0FBU0gsR0FYb0M7QUFZckMsRUFBQSxHQVpxQyxlQVlqQyxNQVppQyxFQVl6QixRQVp5QixFQVlmLEtBWmUsRUFZUjtBQUN6QjtBQUNBLFFBQUksT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFaLEVBQW9CLFFBQXBCLEtBQ0csS0FBSyxDQUFDLFdBQU4sS0FBc0IsTUFEN0IsRUFDcUM7QUFDakMsTUFBQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLEtBQW5CO0FBQ0g7QUFDSjtBQWxCb0MsQ0FBMUIsQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvcmVpeHMnKS5kZWZhdWx0IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgW2dsb2JhbCwgZ2xvYmFsUGlwZXMsIHVybCwgbWV0aG9kID0gJ2dldCcsIHBhcmFtcyA9IG51bGxdID0gYXJnc1xuICAgICAgICAvLyBDYW5ub3QgYmUgbW9kaWZpZWRcbiAgICAgICAgdGhpcy5lbnRpdHkgPSBmZXRjaCh1cmwpXG4gICAgICAgIHRoaXMuZ2xvYmFsSGVhZGVyID0gey4uLmdsb2JhbC5nbG9iYWxIZWFkZXJ9XG4gICAgICAgIHRoaXMuZ2xvYmFsUGFyYW1zID0gey4uLmdsb2JhbC5nbG9iYWxQYXJhbXN9XG4gICAgICAgIHRoaXMuZ2xvYmFsUmVxUGlwZXMgPSBbLi4uZ2xvYmFsUGlwZXMucmVxUGlwZXNdXG4gICAgICAgIHRoaXMuZ2xvYmFsUmVzUGlwZXMgPSBbLi4uZ2xvYmFsUGlwZXMucmVzUGlwZXNdXG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kXG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zXG4gICAgfVxufVxuXG4iLCJpbXBvcnQgSGFuZGxlciBmcm9tICcuL2hhbmRsZXInXG5cbi8vIE11bHRpcGxlIHJlcXVlc3RzIFNoYXJlZFxuY29uc3QgZ2xvYmFsID0ge1xuICAgIGdsb2JhbEhlYWRlcjoge30sXG4gICAgZ2xvYmFsUGFyYW1zOiB7fVxufVxuXG4vLyBQcm9jZXNzaW5nIHBhcmFtZXRlcnNcbmNvbnN0IGdsb2JhbFBpcGVzID0ge1xuICAgIHJlcVBpcGVzOiBbXSxcbiAgICByZXNQaXBlczogW11cbn1cblxuLyoqXG4gKiBDcmVhdGUgcmVpeHMgXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gKiBAcGFyYW0geyp9IHBhcmFtcyAgXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKHVybCwgbWV0aG9kLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gbmV3IEhhbmRsZXIoZ2xvYmFsLCBnbG9iYWxQaXBlcywgdXJsLCBtZXRob2QsIHBhcmFtcylcbn1cblxuLyoqXG4gKiBTZXQgcGlwZSBcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gKiBAcGFyYW0gIHsuLi5hbnl9IGZ1bkxpc3QgXG4gKi9cbmZ1bmN0aW9uIHNldFBpcGVzKG5hbWUsIC4uLmZ1bkxpc3QpIHtcbiAgICBnbG9iYWxQaXBlc1tuYW1lXSA9IFsuLi5mdW5MaXN0XVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IFByb3h5KGNyZWF0ZUluc3RhbmNlLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgc3dpdGNoIChwcm9wZXJ0eSkge1xuICAgICAgICAvLyBSZXBsYWNlZCBieSBicm93c2VyaWZ5LXZlcnNpb25pZnkgdHJhbnNmb3JtXG4gICAgICAgIGNhc2UgJ3ZlcnNpb24nOlxuICAgICAgICAgICAgcmV0dXJuICdfX1ZFUlNJT05fXydcbiAgICAgICAgLy8gU2V0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHBpcGVcbiAgICAgICAgY2FzZSAncmVxUGlwZXMnOlxuICAgICAgICBjYXNlICdyZXNQaXBlcyc6XG4gICAgICAgICAgICByZXR1cm4gc2V0UGlwZXMuYmluZChudWxsLCBwcm9wZXJ0eSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIC8vIE11c3QgYmUgc2V0IHRvIE9iamVjdFxuICAgICAgICBpZiAoUmVmbGVjdC5oYXMoZ2xvYmFsLCBwcm9wZXJ0eSkgXG4gICAgICAgICAgICAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICBnbG9iYWxbcHJvcGVydHldID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH1cbn0pXG5cblxuIl19"}