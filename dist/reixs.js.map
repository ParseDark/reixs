{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","src/handler.js","src/reixs.js","src/request.js","src/shared/constants.js","src/shared/utli.js"],"names":[],"mappings":"AAAA;;;ACAA,MAAM,CAAC,OAAP,GAAiB,OAAO,CAAC,aAAD,CAAP,CAAuB,OAAxC;;;;;;;;;;ACAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGI,sBAAqB;AAAA;;AAAA;;AAAA,SAarB,SAbqB,GAaT,EAbS;AAAA,SAoBrB,CApBqB;AAAA;AAAA;AAAA;AAAA,4BAoBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,cAAA,MAAP,2DAAgB,KAAI,CAAC,MAArB;AAA6B,cAAA,IAA7B;AACO,cAAA,GADP,GACoC,KADpC,CACO,GADP,EACY,MADZ,GACoC,KADpC,CACY,MADZ,EACoB,YADpB,GACoC,KADpC,CACoB,YADpB;AAEM,cAAA,WAFN,GAEoB,IAAI,GAAG,IAAH,GAAU,MAFlC;AAGM,cAAA,aAHN,GAGsB,WAAW,KAAK,MAAhB,GAChB,MADgB,qBAEX,YAFW,EAGX,MAHW,CAHtB;AAAA;AAAA,qBAQmB,iBAAQ,WAAR,EACf,GADe,EAEf,aAFe,CARnB;;AAAA;AAQM,cAAA,IARN;;AAYA,cAAA,KAAI,CAAC,OAAL,CAAa,IAAb;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApBiB;AACjB,IAAA,OAAO,CAAC,GAAR,CAAY,CAAZ;;AADiB,sCAAN,IAAM;AAAN,MAAA,IAAM;AAAA;;AAAA,QAEV,MAFU,GAEiD,IAFjD;AAAA,QAEF,WAFE,GAEiD,IAFjD;AAAA,QAEW,IAFX,GAEiD,IAFjD;AAAA,iBAEiD,IAFjD;AAAA,QAEgB,OAFhB,uBAEyB,KAFzB;AAAA,kBAEiD,IAFjD;AAAA,QAEgC,OAFhC,wBAEyC,IAFzC,YAGjB;;;AACA,SAAK,GAAL,GAAW,IAAX;AACA,SAAK,YAAL,qBAAwB,MAAM,CAAC,YAA/B;AACA,SAAK,YAAL,qBAAwB,MAAM,CAAC,YAA/B;AACA,SAAK,cAAL,sBAA0B,WAAW,CAAC,QAAtC;AACA,SAAK,cAAL,sBAA0B,WAAW,CAAC,QAAtC;AACA,SAAK,MAAL,GAAc,OAAd;AACA,SAAK,SAAL,CAAe,OAAf;AACH;;;;uBAIE,Q,EAAU;AACT,WAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,aAAO,IAAP;AACH;;;4BAiBO,I,EAAM;AACV,WAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAQ,EAAG;AAC9B,QAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAFD;AAGH;;;8BAES,M,EAAQ;AACd,WAAK,MAAL,GAAc,MAAd;AACH;;;gCAEwB;AAAA,UAAf,MAAe,uEAAN,IAAM;;AACrB,UAAI,wBAAa,QAAb,CAAsB,MAAtB,CAAJ,EAAmC;AAC/B,aAAK,MAAL,GAAc,MAAd;AACH,OAFD,MAEO;AACH,cAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACH;AACJ;;;;;;;;;;;;;;;;ACvDL;;;;AAEA;AACA,IAAM,MAAM,GAAG;AACX,EAAA,YAAY,EAAE,EADH;AAEX,EAAA,YAAY,EAAE,EAFH,CAKf;;AALe,CAAf;AAMA,IAAM,WAAW,GAAG;AAChB,EAAA,QAAQ,EAAE,EADM;AAEhB,EAAA,QAAQ,EAAE;AAGd;;;;;;;;AALoB,CAApB;;AAYA,SAAS,cAAT,CAAwB,GAAxB,EAA6B,MAA7B,EAAqC,MAArC,EAA6C;AACzC,SAAO,IAAI,gBAAJ,CAAY,MAAZ,EAAoB,WAApB,EAAiC,GAAjC,EAAsC,MAAtC,EAA8C,MAA9C,CAAP;AACH;AAED;;;;;;;;AAMA,SAAS,QAAT,CAAkB,IAAlB,EAAoC;AAAA,oCAAT,OAAS;AAAT,IAAA,OAAS;AAAA;;AAChC,EAAA,WAAW,CAAC,IAAD,CAAX,aAAwB,OAAxB;AACH;;eAEc,IAAI,KAAJ,CAAU,cAAV,EAA0B;AACrC,EAAA,GADqC,eACjC,MADiC,EACzB,QADyB,EACf;AAClB,YAAQ,QAAR;AACA;AACA,WAAK,SAAL;AACI,eAAO,aAAP;AACJ;;AACA,WAAK,UAAL;AACA,WAAK,UAAL;AACI,eAAO,QAAQ,CAAC,IAAT,CAAc,IAAd,EAAoB,QAApB,CAAP;AAPJ;AASH,GAXoC;AAYrC,EAAA,GAZqC,eAYjC,MAZiC,EAYzB,QAZyB,EAYf,KAZe,EAYR;AACzB;AACA,QAAI,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,QAApB,KACG,KAAK,CAAC,WAAN,KAAsB,MAD7B,EACqC;AACjC,MAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,KAAnB;AACH,KAHD,MAGO;AACH,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACH;AACJ;AApBoC,CAA1B,C;;;;;;;;;;;;ACnCf;;eAEe;AACX,EAAA,GADW,eACP,GADO,EACF,MADE,EACM;AACb,IAAA,GAAG,GAAG,IAAI,GAAJ,CAAQ,GAAR,CAAN;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EACK,OADL,CACa,UAAA,GAAG;AAAA,aAAI,GAAG,CAAC,YAAJ,CAAiB,MAAjB,CAAwB,GAAxB,EAA6B,MAAM,CAAC,GAAD,CAAnC,CAAJ;AAAA,KADhB;AAEA,QAAM,OAAO,GAAG,KAAK,CAAC,GAAD,EAAM;AACvB,MAAA,MAAM,EAAE;AADe,KAAN,CAArB;AAGA,WAAO,uBAAY,OAAZ,CAAP;AACH;AATU,C;;;;;;;;;;ACFR,IAAM,YAAY,GAAG,CACxB,KADwB,EAExB,MAFwB,EAGxB,MAHwB,EAIxB,MAJwB,CAArB;;AAOA,IAAM,YAAY,GAAG;AACxB,EAAA,IAAI,EAAE,gCADkB;AAExB,EAAA,IAAI,EAAE;AAFkB,CAArB;;;;;;;;;;;;ACPA,SAAS,WAAT,CAAqB,QAArB,EAA+B;AAClC,MAAI,QAAQ,CAAC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,WAAO,QAAQ,CAAC,IAAT,EAAP;AACH,GAFD,MAEO;AACH,UAAM,IAAI,KAAJ,EAAN;AACH;AACJ;;AAEM,SAAS,WAAT,CAAqB,OAArB,EAA8B;AACjC,SAAO,OAAO,CACT,IADE,CACG,UAAA,QAAQ;AAAA,WAAI,WAAW,CAAC,QAAD,CAAf;AAAA,GADX,EAEF,KAFE,CAEI,UAAA,KAAK;AAAA,WAAI,KAAJ;AAAA,GAFT,CAAP;AAGH","file":"reixs.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = require('./src/reixs').default","import {METHOD_TYPES} from './shared/constants'\nimport request from './request'\n\nexport default class {\n    constructor(...args) {\n        console.log(1)\n        const [global, globalPipes, url, method = 'get', params = null] = args\n        // Cannot be modified\n        this.url = url\n        this.globalHeader = {...global.globalHeader}\n        this.globalParams = {...global.globalParams}\n        this.globalReqPipes = [...globalPipes.reqPipes]\n        this.globalResPipes = [...globalPipes.resPipes]\n        this.params = params\n        this.setMethod(method)\n    }\n\n    observers = []\n\n    on(observer) {\n        this.observers.push(observer)\n        return this\n    }\n    \n    x = async (params = this.params, type) =>{\n        const {url, method, globalParams} = this\n        const requestType = type ? type : method\n        const requestParams = requestType === 'push' \n            ? params : {\n                ...globalParams,\n                ...params\n            }\n        const data = await request[requestType](\n            url, \n            requestParams\n        )\n        this.execute(data)\n    }\n\n    execute(data) {\n        this.observers.forEach(observer =>{\n            observer(data)\n        })\n    }\n\n    setParams(params) {\n        this.params = params\n    }\n\n    setMethod(method = null) {\n        if (METHOD_TYPES.includes(method)) {\n            this.method = method\n        } else {\n            throw new Error('Invalid method')\n        }\n    }\n}\n\n","import Handler from './handler'\n\n// Multiple requests Shared\nconst global = {\n    globalHeader: {},\n    globalParams: {}\n}\n\n// Processing parameters\nconst globalPipes = {\n    reqPipes: [],\n    resPipes: []\n}\n\n/**\n * Create reixs \n * \n * @param {string} url \n * @param {string} method\n * @param {*} params  \n */\nfunction createInstance(url, method, params) {\n    return new Handler(global, globalPipes, url, method, params)\n}\n\n/**\n * Set pipe \n * \n * @param {string} name \n * @param  {...any} funList \n */\nfunction setPipes(name, ...funList) {\n    globalPipes[name] = [...funList]\n}\n\nexport default new Proxy(createInstance, {\n    get(target, property) {\n        switch (property) {\n        // Replaced by browserify-versionify transform\n        case 'version':\n            return '__VERSION__'\n        // Set request and response pipe\n        case 'reqPipes':\n        case 'resPipes':\n            return setPipes.bind(null, property)\n        }\n    },\n    set(target, property, value) {\n        // Must be set to Object\n        if (Reflect.has(global, property) \n            && value.constructor === Object) {\n            global[property] = value\n        } else {\n            throw new Error('Invalid Settings')\n        }\n    }\n})\n\n\n","import {handleFetch} from './shared/utli'\n\nexport default {\n    get(url, params) {\n        url = new URL(url)\n        Object.keys(params)\n            .forEach(key => url.searchParams.append(key, params[key]))\n        const promise = fetch(url, {\n            method: 'get'\n        })\n        return handleFetch(promise)\n    }\n}","export const METHOD_TYPES = [\n    'get',\n    'post',\n    'form',\n    'push'\n]\n\nexport const CONTENT_TYPE = {\n    JSON: 'application/json;charset=UTF-8',\n    FORM: 'application/x-www-form-urlencoded; charset=UTF-8'\n}","export function checkStatus(response) {\n    if (response.status === 200) {\n        return response.json()\n    } else {\n        throw new Error()\n    }\n}\n\nexport function handleFetch(promise) {\n    return promise\n        .then(response => checkStatus(response))\n        .catch(error => error)\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}